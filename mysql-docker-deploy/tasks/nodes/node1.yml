---

- name: Stop all containers of the same name mysql_master
  docker_container:
    state: absent
    name: "mysql_master"

- name: Create a directory if it does not exist
  file:
    path: /home/vagrant/master
    state: directory
    mode: '0755'

- name: Copy config file
  copy:
    remote_src: no
    src: "master/mysql_master.env"
    dest: "/home/vagrant/master/mysql_master.env"
    owner: vagrant
    group: vagrant
    mode: '0644'

# - name: Create a rabbitmq network
#   docker_network:
#     name: rabbitmq_network       

- name: Start the container mysql_master
  docker_container:
    state: started
    name: "mysql_master"
    image: "mysql:5.7"
    env_file:
      - "/data/mysql_master.env"
    restart: "no"
    ports:
      - 4406:3306
    volumes:
      - /vagrant/master/conf/mysql.conf.cnf:/etc/mysql/conf.d/mysql.conf.cnf
      - /vagrant/master/data:/var/lib/mysql
      - /home/vagrant/master:/data
    # networks:
    #   - overlay

    
###################################
# Check install docker deployments #
###################################

# show container with restarting mode
- name: Verify if containers is up mysql_master
  shell: "docker ps -aq --filter name=mysql_master --filter status=restarting --filter status=exited --latest | wc -l"
  register: container_run_count

# Check if docker deployment is OK
- name: "Check if docker deployment is OK"
  debug:
    msg: "Container mysql_master is OK"
  when:  container_run_count.stdout == "0"  

# Check if docker deployment is KO
- name: Check if docker deployment is KO
  fail: 
    msg: "Container mysql_master is KO"
  when: container_run_count.stdout == "1"
 

    