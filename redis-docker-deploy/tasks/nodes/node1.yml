---

- name: Stop all containers of the same name redis_node1
  docker_container:
    state: absent
    name: "redis_node1"

- name: Create a directory if it does not exist
  file:
    path: /home/vagrant/conf/7001
    state: directory
    mode: '0755'

- name: Copy Redis config file
  copy:
    remote_src: no
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    owner: vagrant
    group: vagrant
    mode: '0644'
  with_items:
     - "{{ files_to_copy }}"


# - name: Copy Redis config file
#   copy:
#     remote_src: no
#     src: "7001/redis.conf"
#     dest: "/home/vagrant/conf/7001/redis.conf"
#     owner: vagrant
#     group: vagrant
#     mode: '0644'


- name: Start the container redis_node1
  docker_container:
    state: started
    name: "redis_node1"
    image: "redis:5"
    user:
    networks: 
      - name: "redis_network"
    volumes:
      - /vagrant/redis/node1/conf:/conf
      - /vagrant/redis/node1/data:/data
    command: "redis-server /conf/redis.conf"
    container_default_behavior: no_defaults
    #published_ports: "{{ docker_container_mapped_port | default(omit) }}"

# - name: Copy create_cluster script file
#   copy:
#     remote_src: yes
#     src: "/vagrant/create_cluster.sh"
#     dest: "/home/vagrant/conf/7001/create_cluster.sh"
#     owner: vagrant
#     group: vagrant
#     mode: '0644'


    
###################################
# Check install docker deployments #
###################################

# show container with restarting mode
- name: Verify if containers is up redis_node1
  shell: "docker ps -aq --filter name=redis_node1 --filter status=restarting --filter status=exited --latest | wc -l"
  register: container_run_count

# Check if docker deployment is OK
- name: "Check if docker deployment is OK"
  debug:
    msg: "Container redis_node1 is OK"
  when:  container_run_count.stdout == "0"  

# Check if docker deployment is KO
- name: Check if docker deployment is KO
  fail: 
    msg: "Container redis_node1 is KO"
  when: container_run_count.stdout == "1"
 
    